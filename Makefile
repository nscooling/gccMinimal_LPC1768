# This file was automagically generated by mbed.org. For more information, 
# see http://mbed.org/handbook/Exporting-to-GCC-ARM-Embedded

GCC_BIN = 
PROJECT = HelloWorld
SOURCES = ./src/main.c ./src/retarget.c ./src/serial.c ./src/ParTest.c ./src/cr_startup_lpc17.c
#CMSIS_OBJECTS = ./LPC17xx/Source/system_LPC17xx.o ./LPC17xx/Source/GCC/startup_ARMCM3.o
CMSIS_OBJECTS = ./LPC17xx/Source/system_LPC17xx.o 
OBJECTS = $(SOURCES:.c=.o) $(CMSIS_OBJECTS)
#SYS_OBJECTS = ./mbed/LPC1768/GCC_ARM/cmsis_nvic.o ./mbed/LPC1768/GCC_ARM/system_LPC17xx.o ./mbed/LPC1768/GCC_ARM/core_cm3.o ./mbed/LPC1768/GCC_ARM/startup_LPC17xx.o 
#INCLUDE_PATHS = -I. -I./mbed -I./mbed/LPC1768 -I./mbed/LPC1768/GCC_ARM 
#LIBRARY_PATHS = -L./mbed/LPC1768/GCC_ARM 
#LIBRARIES = -lmbed 
#LINKER_SCRIPT = ./mbed/LPC1768/GCC_ARM/LPC1768.ld
SYS_OBJECTS = ./FreeRTOS_Source/portable/GCC/ARM_CM3/port.o ./FreeRTOS_Source/croutine.o ./FreeRTOS_Source/event_groups.o ./FreeRTOS_Source/list.o ./FreeRTOS_Source/queue.o ./FreeRTOS_Source/tasks.o ./FreeRTOS_Source/timers.o ./FreeRTOS_Source/portable/MemMang/heap_4.o
INCLUDE_PATHS = -I. -I./include -I./LPC17xx/Include -I./CMSIS/Include -I./FreeRTOS_Source/include -I./FreeRTOS_Source/portable/GCC/ARM_CM3/
LIBRARY_PATHS = 
LIBRARIES = 
#LINKER_SCRIPT = ./LPC1768.ld
LINKER_SCRIPT = ./rtosdemo_rdb1768_Debug.ld

############################################################################### 
AS      = $(GCC_BIN)arm-none-eabi-as
CC      = $(GCC_BIN)arm-none-eabi-gcc
CPP     = $(GCC_BIN)arm-none-eabi-g++
LD      = $(GCC_BIN)arm-none-eabi-gcc
OBJCOPY = $(GCC_BIN)arm-none-eabi-objcopy

CPU = -mcpu=cortex-m3 -mthumb
CC_FLAGS = $(CPU) -c -Os -fno-common -fmessage-length=0 -Wall -fno-exceptions -ffunction-sections -fdata-sections 
#CC_SYMBOLS = -DTARGET_LPC1768 -DTARGET_M3 -DTARGET_NXP -DTARGET_LPC176X -DTOOLCHAIN_GCC_ARM -DTOOLCHAIN_GCC -D__CORTEX_M3 -DARM_MATH_CM3 
CC_SYMBOLS = 
# Need following option for LTO as LTO will treat retarget functions as
# unused without following option
#CFLAGS+=-fno-builtin

#LD_FLAGS = -mcpu=cortex-m3 -mthumb -Wl,--gc-sections --specs=nano.specs -u _printf_float -u _scanf_float
#LD_SYS_LIBS = -lstdc++ -lsupc++ -lm -lc -lgcc -lnosys
LD_FLAGS = $(CPU) -Wl,--gc-sections --specs=nano.specs 
LD_SYS_LIBS = -lm -lc -lgcc -lnosys

all: $(PROJECT).bin

clean:
#	del $(PROJECT).bin $(PROJECT).elf $(OBJECTS)
	rm -f $(PROJECT).bin $(PROJECT).elf $(OBJECTS)

.s.o:
	$(AS) $(CPU) -o $@ $<

.c.o:
	$(CC)  $(CC_FLAGS) $(CC_SYMBOLS) -std=gnu99   $(INCLUDE_PATHS) -o $@ $<

.cpp.o:
	$(CPP) $(CC_FLAGS) $(CC_SYMBOLS) -std=gnu++98 $(INCLUDE_PATHS) -o $@ $<


$(PROJECT).elf: $(OBJECTS) $(SYS_OBJECTS)
	$(LD) $(LD_FLAGS) -T$(LINKER_SCRIPT) $(LIBRARY_PATHS) -o $@ $^ $(LIBRARIES) $(LD_SYS_LIBS) $(LIBRARIES) $(LD_SYS_LIBS)

$(PROJECT).bin: $(PROJECT).elf
	$(OBJCOPY) -O binary $< $@